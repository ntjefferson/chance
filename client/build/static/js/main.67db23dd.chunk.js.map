{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Option","Select","App","props","handleChange","value","setState","dropdown","selectApp","fetch","method","headers","Accept","body","JSON","stringify","appName","state","then","res","json","data","app","name","sum","avg","round","count","this","className","style","padding","height","gutter","md","offset","Item","help","defaultValue","onChange","type","onClick","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VAYQA,EAAYC,IAAZD,QAEAE,EAAWC,IAAXD,OA+FOE,E,YA5Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZC,SAAUF,KAbK,EAiBnBG,UAAY,WACVC,MAAM,oCAAqC,CACzCC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,QAAS,EAAKC,MAAMV,aAGrBW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKf,SAAS,CACZgB,IAAKD,EAAKE,KACVC,IAAKH,EAAKG,IACVC,IAAKJ,EAAKK,MACVC,MAAON,EAAKM,YAhClB,EAAKV,MAAQ,CACXV,SAAU,iBACVe,IAAK,KACLE,IAAK,EACLC,IAAK,EACLE,MAAO,GAPQ,E,sEAuCT,IAAD,EAC0BC,KAAKX,MAA9BK,EADD,EACCA,IAAKE,EADN,EACMA,IAAKC,EADX,EACWA,IAAKE,EADhB,EACgBA,MACvB,OACE,yBAAKE,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC/B,EAAD,CAASgC,MAAO,CAAEC,QAAS,KAAMC,OAAQ,UACvC,kBAAC,IAAD,CAAKC,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,EAAGC,OAAQ,GAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,sCACA,kBAAC,IAAKC,KAAN,CAAWC,KAAK,iDACd,kBAAC,IAAD,CACEC,aAAa,iBACbC,SAAUX,KAAKxB,cAEf,kBAACJ,EAAD,CAAQK,MAAM,kBAAd,kBACA,kBAACL,EAAD,CAAQK,MAAM,wBAAd,wBAGA,kBAACL,EAAD,CAAQK,MAAM,QAAd,QACA,kBAACL,EAAD,CAAQK,MAAM,UAAd,UACA,kBAACL,EAAD,CAAQK,MAAM,UAAd,UACA,kBAACL,EAAD,CAAQK,MAAM,OAAd,OACA,kBAACL,EAAD,CAAQK,MAAM,SAAd,UAEF,kBAAC,IAAD,CAAQmC,KAAK,UAAUC,QAASb,KAAKpB,WAArC,kBAOR,kBAAC,IAAD,CAAK0B,GAAI,EAAGJ,MAAO,CAAEE,OAAQ,SAC3B,kBAAC,IAAD,CAAMF,MAAO,CAAEY,UAAW,WACxB,oCACA,4BAAKpB,GACL,mCACA,4BAAKE,GACL,mCACA,4BAAKC,GACL,qCACA,4BAAKE,a,GAlFLgB,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.67db23dd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Card,\n  Col,\n  Row,\n  Layout,\n  Form,\n  Select,\n  Button\n} from \"antd\";\n\nconst { Content } = Layout;\n\nconst { Option } = Select;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdown: \"Salesforce CRM\",\n      app: \"--\",\n      sum: 0,\n      avg: 0,\n      count: 0\n    };\n  }\n\n  handleChange = value => {\n    this.setState({\n      dropdown: value\n    });\n  };\n\n  selectApp = () => {\n    fetch(`http://localhost:8080/charges/get`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        appName: this.state.dropdown\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          app: data.name,\n          sum: data.sum,\n          avg: data.round,\n          count: data.count\n        });\n      });\n  };\n\n  render() {\n    const { app, sum, avg, count } = this.state;\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Content style={{ padding: \"5%\", height: \"100vh\" }}>\n            <Row gutter={16}>\n              <Col md={6} offset={6}>\n                <Card>\n                  <Form>\n                    <h1>Select</h1>\n                    <Form.Item help=\"Choose an application from the dropdown above\">\n                      <Select\n                        defaultValue=\"Salesforce CRM\"\n                        onChange={this.handleChange}\n                      >\n                        <Option value=\"Salesforce CRM\">Salesforce CRM</Option>\n                        <Option value=\"Adobe Creative Cloud\">\n                          Adobe Creative Cloud\n                        </Option>\n                        <Option value=\"JIRA\">JIRA</Option>\n                        <Option value=\"GitHub\">GitHub</Option>\n                        <Option value=\"Sentry\">Sentry</Option>\n                        <Option value=\"AWS\">AWS</Option>\n                        <Option value=\"Slack\">Slack</Option>\n                      </Select>\n                      <Button type=\"primary\" onClick={this.selectApp}>\n                        Select App\n                      </Button>\n                    </Form.Item>\n                  </Form>\n                </Card>\n              </Col>\n              <Col md={6} style={{ height: \"100%\" }}>\n                <Card style={{ textAlign: \"center\" }}>\n                  <h3>Name</h3>\n                  <h1>{app}</h1>\n                  <h3>Sum</h3>\n                  <h1>{sum}</h1>\n                  <h3>Avg</h3>\n                  <h1>{avg}</h1>\n                  <h3>Count</h3>\n                  <h1>{count}</h1>\n                </Card>\n              </Col>\n            </Row>\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}